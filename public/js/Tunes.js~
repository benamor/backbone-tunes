(function($) {

     window.Album = Backbone.Model.extend({
       
        isFirstTrack: function(index) {
            return (index == 0); 
        },
        islastTrack: function(index) {
            return index >= this.get('tracks').length - 1;
        },
        trackUrlAtIndex: function(index) {
            if (this.get('tracks').length >= index) {
                return this.get('tracks')[index].url;
            } 
            return null;
       
        }
     });

     window.Albums = Backbone.Collection.extend({
        model: Album,
        url: '/albums'
     });

     window.Playlist = Albums.extend({
         
        isFirstAlbum: function(index) {
            return (index == 0)
        },

        isLastAlbum: function(index) {
             return (index == (this.models.length - 1))
        }   
     });     

     window.Player = Backbone.Model.extend({
          defaults: {
              'currentAlbumIndex': 0,
              'currentTrackIndex': 0,
              'state': 'stop'
          },

          initialize: function() {
             this.playlist = new Playlist(); 
          },

          play: function() {
            this.set({'state': 'play'})
          },

          pause: function() {
              this.set({'state': 'pause'})
          },  

          isPlaying: function() {
              return (this.get('state') == 'play')
          },
         
          isStopped: function() {
              return (!this.isPlaying)
          },
    
          currentAlbum: function() {
              return this.playlist.at(this.get('currentAlbumIndex'));
          },

          currenttrackUrl: function() {
              var album = thisurrentAlbum();
              return album.trackUrlAtIndex(this.get('currentTrackIndex'));   
          },

          nextTrack: function() {
            var currentTrackIndex = this.get('currentTrackIndex'),
            currentAlbumIndex = this.get('currentAlbumIndex');
            if (this.currentAlbum().isLastTrack(currentTrackIndex)) {
                if (this.playlist.isLastAlbum(currentAlbumIndex)) {
                    this.set({
                        'currentAlbumIndex': 0
                    });
                    this.set({
                        'currentTrackIndex': 0
                    });
                } else {
                    this.set({
                        'currentAlbumIndex': currentAlbumIndex + 1
                    });
                    this.set({
                        'currentTrackIndex': 0
                    });
                }
            } else {
                this.set({
                    'currentTrackIndex': currentTrackIndex + 1
                });
            }
            this.logCurrentAlbumAndTrack();
        },

        prevTrack: function() {
            var currentTrackIndex = this.get('currentTrackIndex'),
            currentAlbumIndex = this.get('currentAlbumIndex'),
            lastModelIndex = 0;
            if (this.currentAlbum().isFirstTrack(currentTrackIndex)) {
                if (this.playlist.isFirstAlbum(currentAlbumIndex)) {
                    lastModelIndex = this.playlist.models.length - 1;
                    this.set({
                        'currentAlbumIndex': lastModelIndex
                    });
                } else {
                    this.set({
                        'currentAlbumIndex': currentAlbumIndex - 1
                    });
                }
                // In either case, go to last track on album
                var lastTrackIndex =
                this.currentAlbum().get('tracks').length - 1;
                this.set({
                    'currentTrackIndex': lastTrackIndex
                });
            } else {
                this.set({
                    'currentTrackIndex': currentTrackIndex - 1
                });
            }
            this.logCurrentAlbumAndTrack();
        },

        logCurrentAlbumAndTrack: function() {
            console.log("Player " +
            this.get('currentAlbumIndex') + ':' +
            this.get('currentTrackIndex'), this);
        } 
     }); 

     window.library = new Albums();
     window.player  = new Player();

     $(function() {
       window.AlbumView = Backbone.View.extend({
         template: _.template($('#album-template').html()),
         tagName: 'li',
         className: 'album',

         initialize: function() {

           _.bindAll(this, 'render');
           console.log(this);
           this.model.bind('change', this.render);
         },

         render: function(){
           var renderedContent = this.template(this.model.toJSON());
           $(this.el).html(renderedContent);
           return this;
         }
       });

       window.LibraryAlbumView = AlbumView.extend({ //min 44:40 --> wird unklar was gemacht wurde!! 
           events: {
               'click .queue.add': 'select'
           },

           select: function() {
              this.collection.trigger('select', this.model);

           }      
       });

       window.PlaylistAlbumView = AlbumView.extend({
           events: {
               'click .queue.remove': 'removeFromPlaylist'
           },

           initialize: function() {    
             _.bindAll(this, 'render','remove');
             this.model.bind('remove', this.remove);
           },

           removeFromPlaylist: function() {   
              this.options.playlist.remove(this.model);
           }
       });

       window.PlaylistView = Backbone.View.extend({ 
           tagName: 'section',
           className: 'playlist',

           initialize: function() {
              _.bindAll(this, 'render', 'renderAlbum', 'queueAlbum');
              this.template = _.template($('#playlist-template').html());
              this.collection.bind('refresh', this.render); // warum hier refresh und nicht remove?
              this.collection.bind('add', this.renderAlbum);

              this.player = this.options.player;

              this.library = this.options.library;
              this.library.bind('select', this.queueAlbum);
           },

           render: function() {
              $(this.el).html(this.template(this.player.toJSON()));
             
              this.$('button.play').toggle(this.player.isStopped());
              this.$('button.pause').toggle(this.player.isPlaying());

              return this;
           },

           renderAlbum: function(album) {
               var view = new PlaylistAlbumView({
                   model: album,
                   player: this.player,
                   playlist: this.collection
               });
               this.$('ul').append(view.render().el);
            },

           queueAlbum: function(album) {
                  this.collection.add(album);
              }
       });

       window.LibraryView = Backbone.View.extend({
           tagName: 'section',
           className: 'library',
          
          initialize: function() {
              _.bindAll(this, 'render');
              this.template = _.template($('#Library-template').html());
              this.collection.bind('reset', this.render);
          },
       
       render: function() {
         var $albums,
             collection = this.collection;          

         $(this.el).html(this.template({}));  
         $albums = this.$('.albums');
         collection.each(function(album) {
           var view  = new LibraryAlbumView({
               model: album,
               collection: collection
           });
       
           $albums.append(view.render().el);
         });
         return this; 
       }

       });
     });

     window.BackboneTunes = Backbone.Router.extend({
        routes: {
            '':'home',
            'blank': 'blank'
        },

        initialize: function() {
             this.playlistView = new PlaylistView({
               collection: window.player.playlist,
               player:     window.player,
               library:    window.library
             });

             this.libraryView = new LibraryView({ 
               collection: window.library
             });  
     },

        home: function() {
          var $container = $('#container');
          $container.empty();
          $container.append(this.playlistView.render().el);
          $container.append(this.libraryView.render().el);
        },

        blank: function() { 
           var $container = $('#container');
           $('#container').empty();
           $('#container').text('blank');
        }
     });

     $(function(){
          window.App = new BackboneTunes();
          Backbone.history.start();
     });
})(jQuery);
